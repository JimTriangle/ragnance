name: Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # ---------- FRONT ----------
      - name: Setup Node.js (frontend)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install & Build (frontend)
        working-directory: ./client
        run: |
          npm ci || npm install
          npm run build
        env:
          # Laisse vide pour utiliser "/api" en relatif dans ton api.js
          CI: true

      # ---------- PREP & BACKUP DB (NE JAMAIS ÉCRASER LA DB) ----------
      - name: Prepare dirs & backup DB (SSH)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -e
            sudo mkdir -p /var/www/ragnance /var/www/ragnance/server/var/data /var/backups/ragnance
            # Backup DB sqlite si présente
            if [ -f /var/www/ragnance/server/ragnance.sqlite ]; then
              TS=$(date +%Y%m%d-%H%M%S)
              sudo cp /var/www/ragnance/server/ragnance.sqlite /var/backups/ragnance/ragnance.sqlite.$TS.bak
              ls -1t /var/backups/ragnance/ragnance.sqlite.*.bak 2>/dev/null | tail -n +8 | xargs -r sudo rm -f
            fi
            # Backup server/var si non vide
            if [ -d /var/www/ragnance/server/var ] && [ "$(ls -A /var/www/ragnance/server/var)" ]; then
              TS=$(date +%Y%m%d-%H%M%S)
              sudo tar -czf /var/backups/ragnance/server-var-$TS.tgz -C /var/www/ragnance/server var
              ls -1t /var/backups/ragnance/server-var-*.tgz 2>/dev/null | tail -n +8 | xargs -r sudo rm -f
            fi
            sudo chown -R $USER:$USER /var/www/ragnance

      # ---------- CLEAN FRONT (ne touche pas à /server) ----------
      - name: Clean frontend dir on server (SSH)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -e
            sudo find /var/www/ragnance -mindepth 1 -maxdepth 1 ! -name 'server' -exec rm -rf {} +
            sudo chown -R $USER:$USER /var/www/ragnance

      # ---------- SCP FRONT ----------
      - name: Upload frontend build to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          source: "client/build/**"
          target: "/var/www/ragnance"
          strip_components: 2

      # ---------- ASSERT: ne jamais pousser la DB ni le .env ----------
      - name: Assert DB/.env not in artifact
        run: |
          set -e
          if [ -e server/.env ]; then echo "❌ Ne push pas server/.env"; exit 1; fi
          if ls server/*.sqlite >/dev/null 2>&1; then echo "❌ Ne push pas de *.sqlite"; exit 1; fi

      # ---------- DEBUG & GUARANTEE SERVER SOURCES EXIST ----------
      - name: Debug server files (runner)
        run: |
          set -e
          echo "PWD=$(pwd)"
          ls -la server || true
          echo "---- First 120 files ----"
          find server -type f | sed -n '1,120p'

      - name: Ensure server files exist (runner)
        run: |
          set -e
          COUNT=$(find server -type f \( -name "package.json" -o -name "package-lock.json" -o -name "*.js" \) | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "❌ Aucun fichier serveur détecté (archive vide). Vérifie que 'server/' est bien commité et sur la bonne branche."
            exit 1
          else
            echo "✅ $COUNT fichiers serveur trouvés."
          fi

      # ---------- CLEAN CODE BACK (préserve DB + .env + ecosystem) ----------
      - name: Clean server code on server (preserve DB & .env)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -e
            sudo mkdir -p /var/www/ragnance/server/var/data
            # Supprime tout SAUF 'var', '.env', 'ecosystem.config.js' et 'ragnance.sqlite'
            sudo find /var/www/ragnance/server -mindepth 1 -maxdepth 1 \
              ! -name 'var' \
              ! -name '.env' \
              ! -name 'ecosystem.config.js' \
              ! -name 'ragnance.sqlite' \
              -exec rm -rf {} +
            sudo chown -R $USER:$USER /var/www/ragnance/server

      # ---------- SCP SERVER (globs robustes, jamais vide) ----------
      - name: Upload server code to VPS (no DB, no .env)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          source: |
            server/package.json
            server/package-lock.json
            server/server.js
            server/*.js
            server/**/*.js
            server/config/**
            server/middleware/**
            server/models/**
            server/routes/**
            !server/node_modules/**
            !server/.env
            !server/*.sqlite
            !server/**/*.sqlite
            !server/var/**
          target: "/var/www/ragnance/server"
          strip_components: 1

      # ---------- POST-DEPLOY ----------
      - name: Post-deploy on VPS (install deps + pm2 + nginx reload)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -e
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm i -g pm2
            fi

            cd /var/www/ragnance/server
            npm ci --omit=dev || npm install --omit=dev

            if pm2 describe ragnance-api >/dev/null 2>&1; then
              pm2 restart ragnance-api --update-env
            else
              PORT=3000 pm2 start server.js --name ragnance-api
            fi
            pm2 save

            sudo nginx -t && sudo systemctl reload nginx
