name: Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- FRONT ----------
      - name: Setup Node.js (frontend)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install & Build (frontend)
        working-directory: ./client
        run: |
          npm ci || npm install
          npm run build
        env:
          # Laisse vide si tu utilises /api en relatif
          # REACT_APP_API_URL: https://ragnance.fr/api
          CI: true

      # ---------- PREP & BACKUP DB (NE JAMAIS ÉCRASER LA DB) ----------
      - name: Prepare dirs & backup DB (SSH)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -e
            sudo mkdir -p /var/www/ragnance /var/www/ragnance/server/var/data /var/backups/ragnance
            # Sauvegarde DB (server/var) avant toute modif
            if [ -d /var/www/ragnance/server/var ] && [ "$(ls -A /var/www/ragnance/server/var)" ]; then
              TS=$(date +%Y%m%d-%H%M%S)
              sudo tar -czf /var/backups/ragnance/server-var-$TS.tgz -C /var/www/ragnance/server var
              # Rotation: garde les 7 dernières
              ls -1t /var/backups/ragnance/server-var-*.tgz 2>/dev/null | tail -n +8 | xargs -r sudo rm -f
            fi
            # Assure que l'user courant est owner du répertoire de déploiement
            sudo chown -R $USER:$USER /var/www/ragnance

      # ---------- CLEAN FRONT (sans toucher à la DB) ----------
      - name: Clean frontend dir on server (SSH)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -e
            sudo find /var/www/ragnance -mindepth 1 -maxdepth 1 ! -name 'server' -exec rm -rf {} +
            sudo chown -R $USER:$USER /var/www/ragnance

      # ---------- SCP FRONT ----------
      - name: Upload frontend build to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          source: "client/build/**"
          target: "/var/www/ragnance"
          strip_components: 2

      # ---------- ASSERT & PROTÈGE LA DB ----------
      # On vérifie qu'on n'uploade PAS server/var depuis le runner
      - name: Assert DB not in artifact
        run: |
          if [ -e server/var ]; then
            echo "❌ server/var doit rester côté VPS (DB). Supprime-le du repo/artefact.";
            exit 1;
          fi

      # Nettoie le code serveur SANS toucher à server/var
      - name: Clean server code on server (preserve DB)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -e
            sudo mkdir -p /var/www/ragnance/server/var/data
            # Supprime tout sauf 'var'
            sudo find /var/www/ragnance/server -mindepth 1 -maxdepth 1 ! -name 'var' -exec rm -rf {} +
            sudo chown -R $USER:$USER /var/www/ragnance/server

      # ---------- SCP SERVER (EXCLUSION DB) ----------
      - name: Upload server code to VPS (without DB)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          source: |
            server/**
            !server/node_modules/**
            !server/.env
            !server/var/**          # <-- EXCLUSION FORCÉE DE LA DB
          target: "/var/www/ragnance/server"
          strip_components: 1

      # ---------- POST-DEPLOY ----------
      - name: Post-deploy on VPS (install deps + pm2 + nginx reload)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -e
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm i -g pm2
            fi

            cd /var/www/ragnance/server
            npm ci --omit=dev || npm install --omit=dev

            # (Re)start API
            if pm2 describe ragnance-api >/dev/null 2>&1; then
              pm2 restart ragnance-api --update-env
            else
              PORT=3000 pm2 start server.js --name ragnance-api
            fi
            pm2 save

            sudo nginx -t && sudo systemctl reload nginx
